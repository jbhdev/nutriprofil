import streamlit as st
import openai
import joblib
import os
import pandas as pd
from dotenv import load_dotenv
from fpdf import FPDF
from io import BytesIO

# --- Chargement OpenAI ---
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY") or st.secrets.get("OPENAI_API_KEY", "")

# --- Mapping des familles (formulaire -> mod√®le) ---
FAMILLE_MAPPING = {
    "L√©gume": "Fruits et l√©gumes",
    "Fruit": "Fruits et l√©gumes", 
    "Viande": "Viandes et poissons",
    "Laitier": "Produits laitiers",
    "Transform√©": "Plats pr√©par√©s",
    "C√©r√©ale": "C√©r√©ales",
    "Boisson": "Boissons",
    "Autre": "Autres",
    "Sucr√©": "Produits sucr√©s"
}

# Familles reconnues par le mod√®le (bas√©es sur l'erreur)
FAMILLES_MODELE = [
    "Produits animaux",
    "Fruits et l√©gumes",
    "Viandes et poissons", 
    "Produits laitiers",
    "Plats pr√©par√©s",
    "C√©r√©ales",
    "Boissons",
    "Autres",
    "Produits sucr√©s"
]

# --- Fonction pour diagnostiquer les colonnes du mod√®le ---
def get_model_features():
    """R√©cup√®re les noms de colonnes attendues par le mod√®le"""
    try:
        if hasattr(model_cg, 'feature_names_in_'):
            return list(model_cg.feature_names_in_)
        elif hasattr(model_cg, 'feature_names_'):
            return list(model_cg.feature_names_)
        else:
            return None
    except:
        return None

# --- Chargement des mod√®les ---
@st.cache_resource
def load_models():
    base_path = "../streamlit/"
    try:
        model_cg = joblib.load(base_path + "model_charge_glyc√©mique.pkl")
        model_diabete = joblib.load(base_path + "diabete_risque_randomforest.pkl")
        model_obesite = joblib.load(base_path + "obesite_risque_randomforest.pkl")
        model_mcv = joblib.load(base_path + "mcv_risque_randomforest.pkl")
        model_cancer = joblib.load(base_path + "cancercolorectal_risque_randomforest.pkl")
        return model_cg, model_diabete, model_obesite, model_mcv, model_cancer
    except FileNotFoundError as e:
        st.error(f"Erreur lors du chargement des mod√®les : {e}")
        return None, None, None, None, None

model_cg, model_diabete, model_obesite, model_mcv, model_cancer = load_models()

# --- Initialisation des variables de session ---
def init_session_state():
    if "historique_utilisateurs" not in st.session_state:
        st.session_state.historique_utilisateurs = {}
    if "question_index" not in st.session_state:
        st.session_state.question_index = 0
    if "answers" not in st.session_state:
        st.session_state.answers = {}

# --- Questions pos√©es par Debby ---
questions = [
    ("nom", "Comment s'appelle le produit que vous souhaitez analyser ?"),
    ("calories", "Combien de **calories** contient une portion (en kcal) ?"),
    ("glucides", "Combien de **glucides** (en grammes) par portion ?"),
    ("fibres", "Combien de **fibres** (en grammes) ?"),
    ("graisses", "Combien de **graisses** totales (en grammes) ?"),
    ("proteines", "Combien de **prot√©ines** (en grammes) ?"),
    ("sodium", "Combien de **sodium** (en milligrammes) ?"),
    ("famille", "√Ä quelle **famille** appartient ce produit ?", list(FAMILLE_MAPPING.keys()))
]

def show_page():
    # Initialisation
    init_session_state()
    
    # --- Avatar + Pr√©sentation ---
    col1, col2 = st.columns([1, 6])
    with col1:
        # V√©rifier si l'image existe, sinon utiliser un emoji
        if os.path.exists("images/debby-avatar.png"):
            st.image("images/debby-avatar.png", width=90)
        else:
            st.markdown("## üë©‚Äç‚öïÔ∏è")
    with col2:
        st.markdown("""
        ## Bonjour, je suis **Debby**
        Votre conseill√®re en nutrition et sant√©.
        Ensemble, analysons vos produits et prenons de meilleures d√©cisions alimentaires üçΩÔ∏è.
        """)

    st.markdown("---")

    # --- Authentification minimale ---
    if "user" not in st.session_state:
        st.error("‚ùå Vous devez vous connecter sur la Page 1.")
        st.stop()

    user = st.session_state.user
    st.title(f"Bienvenue {user} üôÇ")
    st.markdown("Merci de remplir le formulaire ci-dessous pour analyser un produit alimentaire.")

    # V√©rifier si les mod√®les sont charg√©s
    if model_cg is None:
        st.error("‚ùå Les mod√®les ML ne sont pas disponibles. V√©rifiez les chemins des fichiers.")
        st.stop()
    
    

    # --- Formulaire complet en 2 colonnes ---
    with st.form("formulaire_complet"):
        st.markdown("### üìù Informations sur le produit")

        col1, col2 = st.columns(2)
        with col1:
            nom = st.text_input("üßæ Nom du produit", value="", key="form_nom")
            calories = st.number_input("üî• Calories par portion (kcal)", min_value=0.0, step=1.0, value=0.0, key="form_calories")
            glucides = st.number_input("üçû Glucides (g)", min_value=0.0, step=0.1, value=0.0, key="form_glucides")
            fibres = st.number_input("üåø Fibres (g)", min_value=0.0, step=0.1, value=0.0, key="form_fibres")
        with col2:
            graisses = st.number_input("ü•ë Graisses totales (g)", min_value=0.0, step=0.1, value=0.0, key="form_graisses")
            proteines = st.number_input("üçó Prot√©ines (g)", min_value=0.0, step=0.1, value=0.0, key="form_proteines")
            sodium = st.number_input("üßÇ Sodium (mg)", min_value=0.0, step=1.0, value=0.0, key="form_sodium")
            # Liste directement les familles reconnues par le mod√®le pour √©viter toute confusion
            famille = st.selectbox(
                "üìÇ Famille du produit",
                FAMILLES_MODELE,
                index=0,
                key="form_famille"
            )

        st.markdown("---")
        submitted = st.form_submit_button("‚úÖ Valider les r√©ponses")

    # --- Traitement de la soumission ---
    if submitted:
        # Validation des donn√©es
        if not nom.strip():
            st.error("‚ùå Veuillez entrer un nom de produit.")
        else:
            # Enregistrement des r√©ponses en session_state
            st.session_state.answers = {
                "nom": nom.strip(),
                "calories": float(calories),
                "glucides": float(glucides),
                "fibres": float(fibres),
                "graisses": float(graisses),
                "proteines": float(proteines),
                "sodium": float(sodium),
                "famille": famille
            }
            st.session_state.question_index = len(questions)
            st.success("‚úÖ Donn√©es enregistr√©es avec succ√®s!")
            
            # Afficher imm√©diatement les r√©sultats
            show_result()

def show_result():
    if "answers" not in st.session_state or not st.session_state.answers:
        st.error("‚ùå Aucune donn√©e trouv√©e. Veuillez remplir le formulaire.")
        return
        
    answers = st.session_state.answers
    user = st.session_state.user

    st.markdown("---")
    st.markdown("## üìä R√©sultats de l'analyse")

    try:
        # --- Pr√©diction Charge Glyc√©mique ---
        # La famille peut d√©j√† √™tre celle du mod√®le (si elle provient de FAMILLES_MODELE)
        if answers["famille"] in FAMILLES_MODELE:
            famille_modele = answers["famille"]
        else:
            famille_modele = FAMILLE_MAPPING.get(answers["famille"], "Autres")
        famille_col = "Famille_" + famille_modele
        
        # Cr√©er le DataFrame avec les bonnes colonnes
        df_input = pd.DataFrame([{
            "Calories": answers["calories"],
            "Fibres": answers["fibres"],
            "Glucides": answers["glucides"],
            "Gras": answers["graisses"],  # Chang√© de "Graisses" √† "Gras"
            "Proteines": answers["proteines"]  # Chang√© de "Prot√©ines" √† "Proteines"
        }])
        
        # Ajouter toutes les colonnes famille du mod√®le (initialis√©es √† 0)
        for famille_mod in FAMILLES_MODELE:
            col = "Famille_" + famille_mod
            df_input[col] = 0
        
        # Mettre √† 1 la famille correspondante
        df_input[famille_col] = 1
        
        # S'assurer que les colonnes sont dans le bon ordre (optionnel mais recommand√©)
        colonnes_nutrition = ["Calories", "Fibres", "Glucides", "Gras", "Proteines"]  # Noms mis √† jour
        colonnes_famille = ["Famille_" + f for f in FAMILLES_MODELE]
        df_input = df_input[colonnes_nutrition + colonnes_famille]
        
     
        
        cg = model_cg.predict(df_input)[0]
        st.session_state.cg = cg

        # --- Analyse Sant√© (ML) ---
        X_sante = [[
            answers["sodium"],
            answers["glucides"],
            answers["fibres"],
            answers["graisses"],
            answers["proteines"],
            answers["calories"]
        ]]
        
        risques = {
            "Diab√®te": model_diabete.predict(X_sante)[0],
            "Ob√©sit√©": model_obesite.predict(X_sante)[0],
            "Maladie cardiovasculaire": model_mcv.predict(X_sante)[0],
            "Cancer colorectal": model_cancer.predict(X_sante)[0]
        }
        st.session_state.risques = risques

        # --- Sauvegarder l'historique ---
        if user not in st.session_state.historique_utilisateurs:
            st.session_state.historique_utilisateurs[user] = []

        # √âviter les doublons
        nouveau_produit = {
            "nom": answers["nom"],
            "cg": cg,
            "famille": answers["famille"],  # Garder la famille du formulaire pour l'affichage
            "famille_modele": famille_modele,  # Ajouter aussi la famille du mod√®le
            "risques": risques
        }
        
        # V√©rifier si ce produit n'est pas d√©j√† dans l'historique
        if not any(p["nom"] == nouveau_produit["nom"] for p in st.session_state.historique_utilisateurs[user]):
            st.session_state.historique_utilisateurs[user].append(nouveau_produit)

        # --- Affichage r√©sultats ---
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("üî• Charge glyc√©mique", f"{cg:.2f}")
            
        with col2:
            st.markdown("### üß¨ Analyse sant√©")
            for maladie, risque in risques.items():
                emoji = "üü¢ Faible" if risque == 0 else "üî¥ √âlev√©"
                st.markdown(f"- **{maladie}** : {emoji}")

        # --- Recommandation GPT ---
        if openai.api_key:
            with st.spinner("ü§ñ G√©n√©ration de recommandations..."):
                prompt = f"""
                Tu es Debby, une di√©t√©ticienne bienveillante.
                Voici un produit :
                - Nom : {answers['nom']}
                - Calories : {answers['calories']} kcal
                - Glucides : {answers['glucides']} g
                - Fibres : {answers['fibres']} g
                - Graisses : {answers['graisses']} g
                - Prot√©ines : {answers['proteines']} g
                - Sodium : {answers['sodium']} mg
                - Famille : {answers['famille']}
                - Charge glyc√©mique : {cg:.2f}

                Propose une alternative plus saine qui conserve le type d'ingr√©dient.
                Sois concise et bienveillante.
                """
                try:
                    response = openai.ChatCompletion.create(
                        model="gpt-4",
                        messages=[{"role": "user", "content": prompt}],
                        temperature=0.7,
                        max_tokens=300
                    )
                    suggestion = response.choices[0].message.content.strip()
                    st.markdown(f"### üí° Suggestion de Debby")
                    st.info(suggestion)
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Impossible de g√©n√©rer une recommandation GPT : {e}")
        else:
            st.warning("‚ö†Ô∏è Cl√© API OpenAI non configur√©e. Recommandations GPT indisponibles.")

        # --- Export CSV ---
        st.markdown("---")
        st.markdown("### üì• Exporter vos donn√©es")
        
        histo = st.session_state.historique_utilisateurs[user]
        if histo:
            histo_df = pd.DataFrame([
                {
                    "Produit": h["nom"],
                    "Famille": h["famille"],
                    "Charge glyc√©mique": f"{h['cg']:.2f}",
                    "Risque diab√®te": "√âlev√©" if h["risques"]["Diab√®te"] else "Faible",
                    "Risque ob√©sit√©": "√âlev√©" if h["risques"]["Ob√©sit√©"] else "Faible",
                    "Risque MCV": "√âlev√©" if h["risques"]["Maladie cardiovasculaire"] else "Faible",
                    "Risque cancer colorectal": "√âlev√©" if h["risques"]["Cancer colorectal"] else "Faible"
                } for h in histo
            ])

            col1, col2 = st.columns(2)
            with col1:
                st.download_button(
                    "üì• Exporter en CSV",
                    data=histo_df.to_csv(index=False).encode("utf-8"),
                    file_name=f"historique_{user}.csv",
                    mime="text/csv"
                )

            # --- Export PDF (avec gestion d'erreur pour le logo) ---
            with col2:
                if st.button("üìÑ Exporter PDF stylis√©"):
                    try:
                        pdf = FPDF()
                        pdf.add_page()
                        pdf.set_font("Arial", "B", 14)
                        
                        # Essayer d'ajouter le logo
                        if os.path.exists("images/nutriprofil-logo.png"):
                            pdf.image("images/nutriprofil-logo.png", x=10, y=8, w=40)
                            pdf.ln(25)
                        else:
                            pdf.ln(10)
                            
                        pdf.cell(0, 10, f"Historique des analyses - {user}", ln=True)
                        pdf.ln(5)

                        for h in histo:
                            pdf.set_font("Arial", "B", 12)
                            pdf.cell(0, 10, f"{h['nom']} ({h['famille']})", ln=True)
                            pdf.set_font("Arial", "", 11)
                            pdf.cell(0, 8, f"Charge glycemique : {h['cg']:.2f}", ln=True)
                            for maladie, risque in h["risques"].items():
                                statut = "Eleve" if risque else "Faible"
                                pdf.cell(0, 8, f"{maladie} : {statut}", ln=True)
                            pdf.ln(5)

                        buffer = BytesIO()
                        pdf.output(buffer)
                        st.download_button(
                            "‚¨áÔ∏è T√©l√©charger le PDF", 
                            data=buffer.getvalue(), 
                            file_name=f"rapport_{user}.pdf", 
                            mime="application/pdf"
                        )
                    except Exception as e:
                        st.error(f"Erreur lors de la g√©n√©ration du PDF : {e}")

    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'analyse : {e}")
        st.error("V√©rifiez que tous les mod√®les sont correctement charg√©s.")

    # --- Recommencer ---
    st.markdown("---")
    if st.button("üîÑ Analyser un autre produit"):
        # Garder l'historique mais r√©initialiser le formulaire
        for key in ["question_index", "answers", "cg", "risques"]:
            if key in st.session_state:
                del st.session_state[key]
        st.rerun()

# --- Fonction principale ---
def main():
    st.set_page_config(
        page_title="Debby - Analyse Nutritionnelle",
        page_icon="üçΩÔ∏è",
        layout="wide"
    )
    
    show_page()

if __name__ == "__main__":
    main()