import streamlit as st
import pandas as pd
import plotly.express as px
import sqlite3
import os

st.set_page_config(
    page_title="Nutrition & Sant√© Dashboard",
    layout="wide",
    initial_sidebar_state="expanded"
)

def load_db(path):
    if not os.path.exists(path):
        st.error(f"Fichier introuvable : {path}")
        st.stop()
    return sqlite3.connect(path)

def show_kpis(conn):
    # SECTION SANT√â
    st.markdown("# üè• KPIs Sant√©")
    years_health = pd.read_sql_query(
        "SELECT DISTINCT year_id FROM fact_health ORDER BY year_id", conn
    )["year_id"].tolist()
    sel_year_health = st.sidebar.selectbox(
        "Ann√©e Sant√©", years_health, index=len(years_health)-1
    )
    df_h = pd.read_sql(f"SELECT * FROM fact_health WHERE year_id={sel_year_health}", conn)
    c1, c2, c3, c4 = st.columns(4)
    c1.metric("ü©∏ Diab√®te (%)",     f"{df_h['diabete_prev'].iat[0]:.1f}%")
    c2.metric("üçî Ob√©sit√© (%)",     f"{df_h['obesite_prev'].iat[0]:.1f}%"    if "obesite_prev"    in df_h else "N/A")
    c3.metric("‚ö° Hypertension (%)",f"{df_h['hypertension_prev'].iat[0]:.1f}%" if "hypertension_prev" in df_h else "N/A")

    st.markdown("---")
    # SECTION NUTRITION
    st.markdown("# üçΩÔ∏è KPIs Nutrition")
    # SECTION : R√âPARTITION DES FAMILLES PAR TENEUR
    st.markdown("## üåà R√©partition des familles par teneur moyenne")
    df_fam = pd.read_sql("""
        SELECT f.family_name AS Famille,
               AVG(d.Fibres) AS Fibres_moyennes,
               AVG(d.Gras) AS Gras_moyens,
               AVG(d.Glucides) AS Glucides_moyens
        FROM dim_food d
        JOIN dim_family f ON CAST(d.family_id AS INTEGER )= f.family_id
        GROUP BY f.family_name
    """, conn)

    col1, col2, col3 = st.columns(3)
    col1.plotly_chart(
        px.bar(df_fam, x="Famille", y="Fibres_moyennes",
               title="üíö Fibres moyennes par famille"),
        use_container_width=True
    )
    col2.plotly_chart(
        px.bar(df_fam, x="Famille", y="Gras_moyens",
               title="üßà Gras moyens par famille"),
        use_container_width=True
    )
    col3.plotly_chart(
        px.bar(df_fam, x="Famille", y="Glucides_moyens",
               title="üç¨ Glucides moyens par famille"),
        use_container_width=True
    )

    st.markdown("---")

   
   
    years_cons = pd.read_sql_query(
        "SELECT DISTINCT year_id FROM fact_consumption ORDER BY year_id", conn
    )["year_id"].tolist()
    sel_year_cons = st.sidebar.selectbox(
        "Ann√©e Consommation", years_cons, index=len(years_cons)-1
    )

    # Consommation par cat√©gorie
    st.markdown("## üìà Consommation par cat√©gorie")
    df_cat = pd.read_sql(f"""
        SELECT f.family_name AS Cat√©gorie,
               SUM(CAST(REPLACE(value,' ','') AS REAL)) AS Quantit√©
        FROM fact_consumption c
        JOIN dim_family f ON c.family_id = f.family_id
        WHERE c.year_id = {sel_year_cons}
        GROUP BY f.family_name
    """, conn)
    st.plotly_chart(
        px.bar(df_cat, x="Cat√©gorie", y="Quantit√©",
               labels={"Quantit√©":"kg/habitant"}, height=350),
        use_container_width=True
    )

    # R√©partition
    st.markdown("## üîç R√©partition de la consommation")
    df_cat["Part (%)"] = df_cat["Quantit√©"] / df_cat["Quantit√©"].sum() * 100
    st.plotly_chart(
        px.pie(df_cat, names="Cat√©gorie", values="Part (%)", hole=0.4, height=350),
        use_container_width=True
    )

    # √âvolution
    st.markdown("## üìä √âvolution de la consommation totale")
    df_trend = pd.read_sql("""
        SELECT year_id AS Ann√©e,
               SUM(CAST(REPLACE(value,' ','') AS REAL)) AS Total_Consommation
        FROM fact_consumption
        GROUP BY year_id
        ORDER BY year_id
    """, conn)
    st.plotly_chart(
        px.line(df_trend, x="Ann√©e", y="Total_Consommation",
                labels={"Total_Consommation":"kg/habitant"}, height=350),
        use_container_width=True
    )


def show_dashboard():
    st.title("üåü Dashboard Nutrition & Sant√©")
    db_path = '/Users/coulibalykani/Desktop/Projet 3/nutriprofil/nutriprofil_final.db'
    conn = load_db(db_path)
    show_kpis(conn)
    conn.close()
